/** @file *//********************************************************************************************************

                                                BinaryTriangleTree.cpp

						                    Copyright 2003, John J. Bolton
	--------------------------------------------------------------------------------------------------------------

	$Header: //depot/Roam/RoamTree/BinaryTriangleTree.cpp#3 $

	$NoKeywords: $

 ********************************************************************************************************************/

#include "BinaryTriangleTree.h"

#include "Glx/Glx.h"
#include "Math/Vector3.h"


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

BinaryTriangleTree::BinaryTriangleTree()
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

BinaryTriangleTree::~BinaryTriangleTree()
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

BinaryTriangleTree::Node * BinaryTriangleTree::Root()
{
	return static_cast< Node * >( BinaryTree::Root() );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

BinaryTriangleTree::Node const * BinaryTriangleTree::Root() const
{
	return static_cast< Node const * >( BinaryTree::Root() );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

BinaryTriangleTree::Node * BinaryTriangleTree::FirstLeaf()
{
	return static_cast< Node * >( BinaryTree::FirstLeaf() );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

BinaryTriangleTree::Node const * BinaryTriangleTree::FirstLeaf() const
{
	return static_cast< Node const * >( BinaryTree::FirstLeaf() );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

BinaryTriangleTree::Node * BinaryTriangleTree::NextLeaf( Node * pNode )
{
	return static_cast< Node * >( BinaryTree::NextLeaf( pNode ) );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

BinaryTriangleTree::Node const * BinaryTriangleTree::NextLeaf( Node const * pNode ) const
{
	return static_cast< Node const * >( BinaryTree::NextLeaf( pNode ) );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

void BinaryTriangleTree::Grow( Node * pNode )
{
	assert( pNode != 0 );
	assert( pNode->IsALeaf() );

	Node * const	pLeft	= new Node( pNode );
	if ( !pLeft ) throw std::bad_alloc();
	Node * const	pRight	= new Node( pNode );
	if ( !pRight ) throw std::bad_alloc();

	BinaryTree::Insert( pNode, pLeft, pRight );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

void BinaryTriangleTree::Insert( Node * pNode, std::auto_ptr< Node > pLeft, std::auto_ptr< Node > pRight )
{
	assert( pNode != 0 );
	assert( pNode->IsALeaf() );

	BinaryTree::Insert( pNode, pLeft.release(), pRight.release() );
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

BinaryTriangleTree::Node::Node( Node *					pParent/* = 0*/,
								Glx::TLVertex const *	pV0/* = 0*/,
								Glx::TLVertex const *	pV1/* = 0*/,
								Glx::TLVertex const *	pV2/* = 0*/,
								Node *					pLeft/* = 0*/,
								Node *					pRight/* = 0*/ )
	: BinaryTree::Node( pParent, pLeft, pRight ),
	m_pV0( pV0 ), m_pV1( pV1 ), m_pV2( pV2 )
{
}


/********************************************************************************************************************/
/*																													*/
/*																													*/
/********************************************************************************************************************/

BinaryTriangleTree::Node::~Node()
{
}


